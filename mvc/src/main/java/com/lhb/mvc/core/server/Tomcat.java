package com.lhb.mvc.core.server;

import java.io.File;
import java.nio.charset.Charset;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

public class Tomcat {

    /**
     * Access log configuration.
     */
    private final Accesslog accesslog = new Accesslog();

    /**
     * Regular expression matching trusted IP addresses.
     */
    private String internalProxies = "10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|" // 10/8
            + "192\\.168\\.\\d{1,3}\\.\\d{1,3}|" // 192.168/16
            + "169\\.254\\.\\d{1,3}\\.\\d{1,3}|" // 169.254/16
            + "127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|" // 127/8
            + "172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|" // 172.16/12
            + "172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|" + "172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}";

    /**
     * Header that holds the incoming protocol, usually named "X-Forwarded-Proto".
     */
    private String protocolHeader;

    /**
     * Value of the protocol header indicating whether the incoming request uses
     * SSL.
     */
    private String protocolHeaderHttpsValue = "https";

    /**
     * Name of the HTTP header used to override the original port value.
     */
    private String portHeader = "X-Forwarded-Port";

    /**
     * Name of the HTTP header from which the remote IP is extracted. For instance,
     * `X-FORWARDED-FOR`.
     */
    private String remoteIpHeader;

    /**
     * Tomcat base directory. If not specified, a temporary directory is used.
     */
    private File basedir;

    /**
     * Delay between the invocation of backgroundProcess methods. If a duration
     * suffix is not specified, seconds will be used.
     */
    private Duration backgroundProcessorDelay = Duration.ofSeconds(30);

    /**
     * Maximum number of worker threads.
     */
    private int maxThreads = 0;

    /**
     * Minimum number of worker threads.
     */
    private int minSpareThreads = 0;

    /**
     * Maximum size, in bytes, of the HTTP post content.
     */
    private int maxHttpPostSize = 0;

    /**
     * Maximum size, in bytes, of the HTTP message header.
     */
    private int maxHttpHeaderSize = 0;

    /**
     * Whether requests to the context root should be redirected by appending a / to
     * the path.
     */
    private Boolean redirectContextRoot;

    /**
     * Whether HTTP 1.1 and later location headers generated by a call to
     * sendRedirect will use relative or absolute redirects.
     */
    private Boolean useRelativeRedirects;

    /**
     * Character encoding to use to decode the URI.
     */
    private Charset uriEncoding;

    /**
     * Maximum number of connections that the server accepts and processes at any
     * given time. Once the limit has been reached, the operating system may still
     * accept connections based on the "acceptCount" property.
     */
    private int maxConnections = 0;

    /**
     * Maximum queue length for incoming connection requests when all possible
     * request processing threads are in use.
     */
    private int acceptCount = 0;

    /**
     * Comma-separated list of additional patterns that match jars to ignore for TLD
     * scanning. The special '?' and '*' characters can be used in the pattern to
     * match one and only one character and zero or more characters respectively.
     */
    private List<String> additionalTldSkipPatterns = new ArrayList<String>();

    /**
     * Static resource configuration.
     */
    private final Resource resource = new Resource();

    public int getMaxThreads() {
        return this.maxThreads;
    }

    public void setMaxThreads(int maxThreads) {
        this.maxThreads = maxThreads;
    }

    public int getMinSpareThreads() {
        return this.minSpareThreads;
    }

    public void setMinSpareThreads(int minSpareThreads) {
        this.minSpareThreads = minSpareThreads;
    }

    public int getMaxHttpPostSize() {
        return this.maxHttpPostSize;
    }

    public void setMaxHttpPostSize(int maxHttpPostSize) {
        this.maxHttpPostSize = maxHttpPostSize;
    }

    public Accesslog getAccesslog() {
        return this.accesslog;
    }

    public Duration getBackgroundProcessorDelay() {
        return this.backgroundProcessorDelay;
    }

    public void setBackgroundProcessorDelay(Duration backgroundProcessorDelay) {
        this.backgroundProcessorDelay = backgroundProcessorDelay;
    }

    public File getBasedir() {
        return this.basedir;
    }

    public void setBasedir(File basedir) {
        this.basedir = basedir;
    }

    public String getInternalProxies() {
        return this.internalProxies;
    }

    public void setInternalProxies(String internalProxies) {
        this.internalProxies = internalProxies;
    }

    public String getProtocolHeader() {
        return this.protocolHeader;
    }

    public void setProtocolHeader(String protocolHeader) {
        this.protocolHeader = protocolHeader;
    }

    public String getProtocolHeaderHttpsValue() {
        return this.protocolHeaderHttpsValue;
    }

    public void setProtocolHeaderHttpsValue(String protocolHeaderHttpsValue) {
        this.protocolHeaderHttpsValue = protocolHeaderHttpsValue;
    }

    public String getPortHeader() {
        return this.portHeader;
    }

    public void setPortHeader(String portHeader) {
        this.portHeader = portHeader;
    }

    public Boolean getRedirectContextRoot() {
        return this.redirectContextRoot;
    }

    public void setRedirectContextRoot(Boolean redirectContextRoot) {
        this.redirectContextRoot = redirectContextRoot;
    }

    public Boolean getUseRelativeRedirects() {
        return this.useRelativeRedirects;
    }

    public void setUseRelativeRedirects(Boolean useRelativeRedirects) {
        this.useRelativeRedirects = useRelativeRedirects;
    }

    public String getRemoteIpHeader() {
        return this.remoteIpHeader;
    }

    public void setRemoteIpHeader(String remoteIpHeader) {
        this.remoteIpHeader = remoteIpHeader;
    }

    public Charset getUriEncoding() {
        return this.uriEncoding;
    }

    public void setUriEncoding(Charset uriEncoding) {
        this.uriEncoding = uriEncoding;
    }

    public int getMaxConnections() {
        return this.maxConnections;
    }

    public void setMaxConnections(int maxConnections) {
        this.maxConnections = maxConnections;
    }

    public int getMaxHttpHeaderSize() {
        return this.maxHttpHeaderSize;
    }

    public void setMaxHttpHeaderSize(int maxHttpHeaderSize) {
        this.maxHttpHeaderSize = maxHttpHeaderSize;
    }

    public int getAcceptCount() {
        return this.acceptCount;
    }

    public void setAcceptCount(int acceptCount) {
        this.acceptCount = acceptCount;
    }

    public List<String> getAdditionalTldSkipPatterns() {
        return this.additionalTldSkipPatterns;
    }

    public void setAdditionalTldSkipPatterns(List<String> additionalTldSkipPatterns) {
        this.additionalTldSkipPatterns = additionalTldSkipPatterns;
    }

    public Resource getResource() {
        return this.resource;
    }

    /**
     * Tomcat access log properties.
     */
    public static class Accesslog {

        /**
         * Enable access log.
         */
        private boolean enabled = false;

        /**
         * Format pattern for access logs.
         */
        private String pattern = "common";

        /**
         * Directory in which log files are created. Can be absolute or relative to the
         * Tomcat base dir.
         */
        private String directory = "logs";

        /**
         * Log file name prefix.
         */
        protected String prefix = "access_log";

        /**
         * Log file name suffix.
         */
        private String suffix = ".log";

        /**
         * Whether to enable access log rotation.
         */
        private boolean rotate = true;

        /**
         * Whether to defer inclusion of the date stamp in the file name until rotate
         * time.
         */
        private boolean renameOnRotate;

        /**
         * Date format to place in the log file name.
         */
        private String fileDateFormat = ".yyyy-MM-dd";

        /**
         * Set request attributes for the IP address, Hostname, protocol, and port used
         * for the request.
         */
        private boolean requestAttributesEnabled;

        /**
         * Whether to buffer output such that it is flushed only periodically.
         */
        private boolean buffered = true;

        public boolean isEnabled() {
            return this.enabled;
        }

        public void setEnabled(boolean enabled) {
            this.enabled = enabled;
        }

        public String getPattern() {
            return this.pattern;
        }

        public void setPattern(String pattern) {
            this.pattern = pattern;
        }

        public String getDirectory() {
            return this.directory;
        }

        public void setDirectory(String directory) {
            this.directory = directory;
        }

        public String getPrefix() {
            return this.prefix;
        }

        public void setPrefix(String prefix) {
            this.prefix = prefix;
        }

        public String getSuffix() {
            return this.suffix;
        }

        public void setSuffix(String suffix) {
            this.suffix = suffix;
        }

        public boolean isRotate() {
            return this.rotate;
        }

        public void setRotate(boolean rotate) {
            this.rotate = rotate;
        }

        public boolean isRenameOnRotate() {
            return this.renameOnRotate;
        }

        public void setRenameOnRotate(boolean renameOnRotate) {
            this.renameOnRotate = renameOnRotate;
        }

        public String getFileDateFormat() {
            return this.fileDateFormat;
        }

        public void setFileDateFormat(String fileDateFormat) {
            this.fileDateFormat = fileDateFormat;
        }

        public boolean isRequestAttributesEnabled() {
            return this.requestAttributesEnabled;
        }

        public void setRequestAttributesEnabled(boolean requestAttributesEnabled) {
            this.requestAttributesEnabled = requestAttributesEnabled;
        }

        public boolean isBuffered() {
            return this.buffered;
        }

        public void setBuffered(boolean buffered) {
            this.buffered = buffered;
        }

    }

    /**
     * Tomcat static resource properties.
     */
    public static class Resource {

        /**
         * Time-to-live of the static resource cache.
         */
        private Duration cacheTtl;

        public Duration getCacheTtl() {
            return this.cacheTtl;
        }

        public void setCacheTtl(Duration cacheTtl) {
            this.cacheTtl = cacheTtl;
        }

    }

}
